version: '3.8'
services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - my_network

  kafka-node1:
    image: wurstmeister/kafka:latest
    container_name: kafka-node1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-node1:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - my_network
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092"]
      interval: 15s
      timeout: 10s
      retries: 5

  kafka-node2:
    image: wurstmeister/kafka:latest
    container_name: kafka-node2
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-node2:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - my_network
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9093"]
      interval: 15s
      timeout: 10s
      retries: 5

  kafka-node3:
    image: wurstmeister/kafka:latest
    container_name: kafka-node3
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-node3:9094
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - my_network
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9094"]
      interval: 15s
      timeout: 10s
      retries: 5

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKER_CONNECT: kafka-node1:9092,kafka-node2:9093, kafka-node3:9094
    networks:
      - my_network
    depends_on:
      - kafka-node1
      - kafka-node2
      - kafka-node3

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus 
    ports:
      - "9090:9090"
    networks:
      - my_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana-data:/var/lib/grafana 
    ports:
      - "3000:3000"
    networks:
      - my_network
    depends_on:
      - prometheus

  cassandra-node1:
    image: cassandra:latest
    container_name: cassandra-node1
    ports:
      - "9042:9042"
    volumes:
      - cassandra_data_node1:/var/lib/cassandra
    networks:
      - my_network
    environment:
      - CASSANDRA_SEEDS=cassandra-node1,cassandra-node2
      - CASSANDRA_CLUSTER_NAME=my_cluster
      - CASSANDRA_DC=dc1
      - CASSANDRA_RACK=rack1
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe keyspaces'"]
      interval: 10s
      timeout: 5s
      retries: 5


  cassandra-node2:
    image: cassandra:latest
    container_name: cassandra-node2
    ports:
      - "9142:9042"
    volumes:
      - cassandra_data_node2:/var/lib/cassandra
    networks:
      - my_network
    environment:
      - CASSANDRA_SEEDS=cassandra-node1,cassandra-node2
      - CASSANDRA_CLUSTER_NAME=my_cluster
      - CASSANDRA_DC=dc1
      - CASSANDRA_RACK=rack1
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe keyspaces'"]
      interval: 10s
      timeout: 5s
      retries: 5

  # cassandra-exporter-node1:
  #   image: criteord/cassandra_exporter:latest
  #   container_name: cassandra-exporter-node1
  #   ports:
  #     - "9180:9180"  # Cassandra exporter metrics endpoint
  #   networks:
  #     - my_network
  #   depends_on:
  #     - cassandra-node1
  #   command: "--cassandra.host=cassandra-node1 --cassandra.port=9042 --listen-address=0.0.0.0"

  redis:
    image: "redis:alpine"
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - my_network
    healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 10s
        timeout: 5s
        retries: 5



  master_node:
    build: ./master_node
    container_name: master-node
    ports:
      - "5000:5000"
    environment:
      - CASSANDRA_HOST=cassandra-node1,cassandra-node2
      - KAFKA_BOOTSTRAP_SERVERS=kafka-node1:9092,kafka-node2:9093,kafka-node3:9094
      - REDIS_HOST=redis
    volumes:
      - ./master_node:/app
    depends_on:
      kafka-node1:
        condition: service_healthy
      cassandra-node1:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - my_network




  worker_node1:
    build:
      context: ./worker_node
      dockerfile: Dockerfile.worker1
    container_name: worker-node1
    depends_on:
      kafka-node1:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - my_network
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka-node1:9092,kafka-node2:9093,kafka-node3:9094
      - REDIS_HOST=redis
      - WORKER_ID=worker-1
      - PORT=8000
    volumes:
      - ./worker_node:/app
    restart: on-failure

  worker_node2:
    build:
      context: ./worker_node 
      dockerfile: Dockerfile.worker2
    container_name: worker-node2
    depends_on:
      kafka-node1:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "9001:9001"
    networks:
      - my_network
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka-node1:9092,kafka-node2:9093,kafka-node3:9094
      - REDIS_HOST=redis
      - WORKER_ID=worker-2
      - PORT=9001
    volumes:
      - ./worker_node:/app
    restart: on-failure


  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "3001:3000"
    networks:
      - my_network
    depends_on:
      - master_node
    restart: on-failure
    volumes: 
      - ./frontend:/app

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis:6379
    networks:
      - my_network
    depends_on:
      - redis

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    command: ["--kafka.server=kafka-node1:9092", "--kafka.server=kafka-node2:9093","--kafka.server=kafka-node3:9094"]
    ports:
      - "9308:9308"
    networks:
      - my_network
    depends_on:
      kafka-node1:
        condition: service_healthy
      kafka-node2:
        condition: service_healthy
      kafka-node3:
        condition: service_healthy

  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    networks:
      - my_network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys:/sys
      - /var/lib/docker/:/var/lib/docker/

volumes:
  cassandra_data_node1:
  cassandra_data_node2:
  prometheus-data: 
  grafana-data: 


networks:
  my_network:
    driver: bridge
